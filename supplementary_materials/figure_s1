# ==============================================================================
# SCRIPT FOR GENERATING CONFORMITY CURVES COMPARISON FIGURE
# ==============================================================================
# This script generates Figure 5 (supplementary material) comparing conformity 
# curves from simulations in both Cultural and Gene-Culture models with 
# analytical predictions.
# ==============================================================================

#### conformity curves from simulations ####

# ------------------------------------------------------------------------------
# DATA LOADING AND PREPROCESSING
# ------------------------------------------------------------------------------
# Load simulation results from both models
# dfA: Results from Cultural Model
# dfB: Results from Gene-Culture Model
dfA <- read.csv("dfA_mean_pop1000_rep1000.csv")
dfB <- read.csv("dfB_mean_pop1000_rep1000.csv")

# Filter datasets to remove:
# - n_obs = 0
# - c = 0.7, 0.9: intermediate conformity values excluded for clarity in visualization
dfA_sub <- subset(dfA, n_obs != 0 & c != 0.7 & c!= 0.9)
dfB_sub <- subset(dfB, n_obs != 0 & c != 0.7 & c!= 0.9)

# Convert numerical variables to factors for discrete color mapping in plots
dfA_sub$n_obs <- as.factor(dfA_sub$n_obs)
dfA_sub$c <- as.factor(dfA_sub$c)

# Create labels for faceting panels showing different conformity levels
# Labels will display as "c = 0.5", "c = 0.6", etc.
c_labs <- c()
for (i in 1 : length(unique(dfB_sub$c))){
  c_labs[i] <- paste("c =", unique(dfB_sub$c)[i])
}
names(c_labs) <- unique(dfB_sub$c)

# Load required visualization libraries
library(ggplot2)   # Main plotting library
library(patchwork) # For combining multiple plots
library(viridis)   # Color-blind friendly color palettes

# ------------------------------------------------------------------------------
# PLOT A: CONFORMITY CURVES FROM CULTURAL MODEL SIMULATIONS
# ------------------------------------------------------------------------------
# Calculate conditional probability for Cultural Model
conf_curves_cultural <- ggplot(dfA_sub, aes(x = female_choice_first, y = female_choice_last, color = n_obs)) +
  # Background polygons indicating theoretical predictions:
  # Blue regions: areas where conformity should increase choice for type 1
  # Gray regions: areas where random choice or anti-conformity expected
  annotate(geom = "polygon", x = c(0, 0.5, 0.5), y = c(0, 0, 0.5), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 0.5, 1), y = c(0.5, 1, 1), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 1, 1), y = c(0.5, 0.5, 1), fill = "gray80", alpha = 0.2) +
  annotate(geom = "polygon", x = c(0, 0, 0.5), y = c(0, 0.5, 0.5), fill = "gray80", alpha = 0.2) +
  # Main data visualization
  # geom_point(size = 1) +  # Points commented out for cleaner lines
  geom_line(lwd = 0.75) +   # Line thickness set to 0.75 for visibility
  # Reference lines for interpretation:
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey") +  # Random choice line
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "grey") +  # Population equilibrium
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey") +  # No-change line
  # Separate panels for different conformity strengths
  facet_grid(~ c, labeller = labeller(c = c_labs)) +
  # X-axis: Initial frequency of choice for type 1 males in population
  scale_x_continuous(expression("Frequency in the population of choices for type 1 males" ~ F(C[1]) ~ "at" ~ t[0]), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  # Y-axis: Final frequency after one generation of cultural transmission
  scale_y_continuous(expression(F(C[1] ~ "|" ~ E[1]) ~ "at" ~ t[1]), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  # Color scheme: viridis palette for sample size (n_obs)
  scale_color_viridis(option = "D", discrete = TRUE, direction = -1, begin = 0.4, end = 0.8, 
                      labels = c(1, seq(5, 30, 5), expression("">= n[mat]))) +
  guides(color = guide_legend(title = expression(n[obs]))) +
  ggtitle("A. Conformity curves from simulations in Cultural Model") +
  theme_minimal() +
  # Detailed theme customization for publication quality
  theme(strip.background = element_blank(),
        title = element_text(size = 15, margin = margin(t = 20)),    
        axis.title.x = element_text(size = 15, margin = margin(t = 15)),  # X-axis title formatting
        axis.title.y = element_text(size = 15, margin = margin(r = 15)),  # Y-axis title formatting
        axis.text.x = element_text(size = 12),   # X-axis labels
        axis.text.y = element_text(size = 12),   # Y-axis labels
        legend.title = element_text(size = 12),  # Legend title
        legend.text = element_text(size = 11),   # Legend labels
        strip.text = element_text(size = 12))    # Facet panel labels
conf_curves_cultural

# ------------------------------------------------------------------------------
# DATA TRANSFORMATION FOR GENE-CULTURE MODEL
# ------------------------------------------------------------------------------
# Calculate conditional probability for Gene-Culture Model
dfB_sub$conditional_proba_choose1 <- dfB_sub$c * dfB_sub$female_preference_last + (1-dfB_sub$c) * (1 - dfB_sub$female_preference_last)

# Convert to factors for consistent plotting with Cultural Model
dfB_sub$n_obs <- as.factor(dfB_sub$n_obs)
dfB_sub$c <- as.factor(dfB_sub$c)

# ------------------------------------------------------------------------------
# PLOT B: CONFORMITY CURVES FROM GENE-CULTURE MODEL SIMULATIONS
# ------------------------------------------------------------------------------
# Similar structure to Plot A but shows results from Gene-Culture Model
# where both genetic preferences and cultural transmission influence choice
conf_curves_geneculture <- ggplot(dfB_sub, aes(x = female_choice_first, y = conditional_proba_choose1, color = n_obs)) +
  # Same background polygon annotations as Cultural Model for comparison
  annotate(geom = "polygon", x = c(0, 0.5, 0.5), y = c(0, 0, 0.5), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 0.5, 1), y = c(0.5, 1, 1), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 1, 1), y = c(0.5, 0.5, 1), fill = "gray80", alpha = 0.2) +
  annotate(geom = "polygon", x = c(0, 0, 0.5), y = c(0, 0.5, 0.5), fill = "gray80", alpha = 0.2) +
  # Main visualization elements (identical to Cultural Model plot)
  geom_line(lwd = 0.75) +
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey") +
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "grey") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey") +
  facet_grid(~ c, labeller = labeller(c = c_labs)) +
  # Axis labels match Cultural Model for direct comparison
  scale_x_continuous(expression("Frequency in the population of choices for type 1 males" ~ F(C[1]) ~ "at" ~ t[0]), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  scale_y_continuous(expression(F(C[1] ~ "|" ~ E[1]) ~ "at" ~ t[1]), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  scale_color_viridis(option = "D", discrete = TRUE, direction = -1, begin = 0.4, end = 0.8, 
                      labels = c(1, seq(5, 30, 5), expression("">= n[mat]))) +
  guides(color = guide_legend(title = expression(n[obs]))) +
  ggtitle("B. Conformity curves from simulations in Gene-Culture Model") +
  theme_minimal() +
  # Identical theme to Cultural Model plot for consistency
  theme(strip.background = element_blank(),
        title = element_text(size = 15, margin = margin(t = 20)),    
        axis.title.x = element_text(size = 15, margin = margin(t = 15)),
        axis.title.y = element_text(size = 15, margin = margin(r = 15)), 
        axis.text.x = element_text(size = 12),  
        axis.text.y = element_text(size = 12),
        legend.title = element_text(size = 12),  
        legend.text = element_text(size = 11),
        strip.text = element_text(size = 12)) 
conf_curves_geneculture

# ------------------------------------------------------------------------------
# ANALYTICAL CONFORMITY CURVES SETUP
# ------------------------------------------------------------------------------
#### analytical conformity curves ####

# Model parameters matching simulation conditions
parameters <- list(
  nb_class = c(1,1),           # Age classes for males and females
  K = 1000,                    # Population size
  female_strategy = "conformity", # Female mate choice strategy
  survival = 0.9,              # Survival rate (must be < 1)
  ageing = 0.1,               # Probability to stay in same age class
  initial_trait_frequency = 0.5, # Initial probability that males have trait 1
  n_matings = 100,            # Maximum matings per male per time step
  mutation_rate = 0.1,        # Genetic mutation rate (heritability = 1 - mutation_rate)
  n_obs = 10,                 # Maximum number of couples observed per female
  c = 0.5)                    # Copying rate (conformity strength)

# Average number of observable matings per time step (empirically determined from simulations)
n_observable_matings <- 224 

# Parameter grid for analytical calculations
# Covers same parameter space as simulations for direct comparison
param_grid <- expand.grid(n_obs = c(0, 1, seq(5, 30, 5)),           # Sample sizes
                          mutation_rate = 0,                          # No mutation for analytical case
                          c = seq(0.5, 1, 0.1),                     # Conformity strengths
                          initial_trait_frequency = seq(0, 1, 1/n_observable_matings)) # All possible frequencies

n_rep <- 1000  # Number of replications (for compatibility with simulation data structure)

# Extract unique parameter values for iteration
c_vector <- unique(param_grid$c)
n_obs_vector <- unique(param_grid$n_obs)
nb_of_plots <- length(c_vector)
ratios <- seq(0, 1, 1/n_observable_matings)        # Frequency ratios for x-axis
possible_n_matings_1 <- seq(0, n_observable_matings, 1)  # All possible counts of type 1 matings

# ------------------------------------------------------------------------------
# ANALYTICAL FUNCTION FOR THEORETICAL PREDICTIONS
# ------------------------------------------------------------------------------
#### function for analytical curves ####

# Calculate theoretical conformity response based on hypergeometric distribution
theoretical_conformity_response <- function(n_matings, n_matings_1, n_obs, c) {
  # Ensure sample size doesn't exceed available matings (biological constraint)
  n_obs <- min(n_obs, n_matings) 
  
  # Quorum needed to detect majority: more than half of observed matings
  # floor() used because phyper tests P(X > x), so we need strict inequality
  quorum_needed = floor(n_obs/2) 
  
  # Probability of observing majority for type 1 using hypergeometric distribution
  # Drawing n_obs samples from population with n_matings_1 successes out of n_matings total
  p_maj1 = phyper(quorum_needed, n_matings_1, n_matings - n_matings_1, 
                  n_obs, lower.tail = FALSE)
  
  # Probability of observing majority for type 0 (using complementary logic)
  p_maj0 = phyper(quorum_needed, n_matings - n_matings_1, n_matings_1, 
                  n_obs, lower.tail = FALSE)
  
  # Probability of no clear majority (tie cases)
  # Rounded to avoid negative infinitesimal probabilities from floating point errors
  p_no_maj = round(1 - p_maj1 - p_maj0, 5) 
  
  # Convert majority detection to preferences
  # If majority for type 1: prefer type 1
  # If majority for type 0: prefer type 0  
  # If no majority: random preference (50-50 split)
  p_pref1 <- p_maj1 + 0.5*p_no_maj
  p_pref0 <- p_maj0 + 0.5*p_no_maj
  
  # Final choice probability combines conformist preference with baseline tendency
  # c = 1: pure conformity (follow observed majority)
  # c = 0.5: equal weight to conformity and counter-conformity
  p_choice1 <- c*p_pref1 + (1-c)*p_pref0
  
  return(p_choice1)
}

# ------------------------------------------------------------------------------
# COMPUTE ANALYTICAL CURVES FOR ALL PARAMETER COMBINATIONS
# ------------------------------------------------------------------------------
#### computing analytical conformist curves (conditional probability) ####

# Initialize data structure for analytical results
columns_df <- c("p_choice_1","n_matings_1", "ratio_matings_1","n_obs", "c") 
analytical_curves <- data.frame(matrix(nrow = 0, ncol = length(columns_df))) 
colnames(analytical_curves) = columns_df
plots_list <- list()  # Storage for individual plot data

# Nested loops to calculate theoretical curves for each parameter combination
count <- 1
while (count <= nb_of_plots) {
  tested_c <- c_vector[count]  # Current conformity level being tested
  
  # Initialize data frame for current conformity level
  one_plot_df <- data.frame(matrix(nrow = 0, ncol = length(columns_df))) 
  colnames(one_plot_df) = columns_df
  
  prop <- 1
  # Loop through each sample size (n_obs)
  for (nobs in n_obs_vector) {
    # Initialize data frame for current sample size
    one_nobs_df <- data.frame(matrix(nrow = length(possible_n_matings_1), ncol = length(columns_df))) 
    colnames(one_nobs_df) = columns_df
    
    # Calculate theoretical response for each possible number of type 1 matings
    for (i in 1 : length(possible_n_matings_1)) { 
      one_nobs_df[i, "n_matings_1"] <- possible_n_matings_1[i]  # Absolute count
      one_nobs_df[i, "n_obs"] <- nobs                          # Sample size
      one_nobs_df[i, "ratio_matings_1"] <- ratios[i]           # Frequency ratio
      one_nobs_df[i, "c"] <- tested_c                          # Conformity strength
      # Core calculation: theoretical probability of choosing type 1
      one_nobs_df[i, "p_choice_1"] <- theoretical_conformity_response(n_observable_matings, 
                                                                      possible_n_matings_1[i], 
                                                                      nobs, tested_c)
    } 
    # Combine results for current sample size
    one_plot_df <- rbind(one_plot_df, one_nobs_df)
    plots_list[[count]] <- one_plot_df
    prop <- prop + 1
  }
  # Combine results for current conformity level
  analytical_curves <- rbind(analytical_curves, one_plot_df)
  count <- count + 1
}

# ------------------------------------------------------------------------------
# PLOT C: ANALYTICAL CONFORMITY CURVES
# ------------------------------------------------------------------------------
#### plot analytical conformity curves ####

# Convert variables to factors for consistent plotting with simulation results
analytical_curves$n_obs <- as.factor(analytical_curves$n_obs)
analytical_curves$c <- as.factor(analytical_curves$c)

# Create labels for conformity level facets (matching simulation plots)
c_labs <- c()
for (i in 1 : length(unique(param_grid$c))){
  c_labs[i] <- paste("c =", unique(param_grid$c)[i])
}
names(c_labs) <- unique(param_grid$c)

# Filter to match simulation plot parameters (exclude n_obs=0 and c=0.7,0.9)
analytical_curves_sub <- subset(analytical_curves, n_obs != 0 & c != 0.7 & c!= 0.9)

# Create analytical curves plot with identical structure to simulation plots
analytical_conf_curves <- ggplot(analytical_curves_sub, aes(x = ratio_matings_1, y = p_choice_1, color = n_obs)) +
  # Same background regions as simulation plots for direct comparison
  annotate(geom = "polygon", x = c(0, 0.5, 0.5), y = c(0, 0, 0.5), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 0.5, 1), y = c(0.5, 1, 1), fill = "#48bbe8", alpha = 0.3) +
  annotate(geom = "polygon", x = c(0.5, 1, 1), y = c(0.5, 0.5, 1), fill = "gray80", alpha = 0.2) +
  annotate(geom = "polygon", x = c(0, 0, 0.5), y = c(0, 0.5, 0.5), fill = "gray80", alpha = 0.2) +
  # Main visualization elements
  geom_line(lwd = 0.75) +
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey") +
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "grey") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "grey") +
  facet_grid(~ c, labeller = labeller(c = c_labs)) +
  # X-axis: Population frequency (matching simulation plots but with different time notation)
  scale_x_continuous(expression("Frequency in the population of choices for type 1 males" ~ F(C[1]) ~ "at" ~ t-1), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  # Y-axis: Conditional probability of choice (theoretical prediction)
  scale_y_continuous(expression(P(C[1] ~ "|" ~ E[1]) ~ "at" ~ t), 
                     breaks = seq(0, 1, 0.25), limits = c(0,1), labels = seq(0, 1, 0.25)) +
  # Color scheme identical to simulation plots
  scale_color_viridis(option = "D", discrete = TRUE, direction = -1, begin = 0.4, end = 0.8, 
                      labels = c(1, seq(5, 30, 5), expression("">= n[mat]))) +
  guides(color = guide_legend(title = expression(n[obs]))) +
  ggtitle("C. Analytical conformity curves (identical in the Cultural and Gene–Culture Models)") +
  theme_minimal() +
  # Theme matching simulation plots for consistency
  theme(strip.background = element_blank(),
        title = element_text(size = 15, margin = margin(t = 20)),    
        axis.title.x = element_text(size = 15, margin = margin(t = 15)),
        axis.title.y = element_text(size = 15, margin = margin(r = 15)), 
        axis.text.x = element_text(size = 12),  
        axis.text.y = element_text(size = 12),
        legend.title = element_text(size = 12),  
        legend.text = element_text(size = 11),
        strip.text = element_text(size = 12)) 
analytical_conf_curves

# ------------------------------------------------------------------------------
# FINAL FIGURE ASSEMBLY AND EXPORT
# ------------------------------------------------------------------------------
#### All plots together ####

# Combine all three plots vertically using patchwork
figure_conf_curves <- conf_curves_cultural / conf_curves_geneculture / analytical_conf_curves + 
  plot_layout(axes = "collect") +    # Align axes across plots
  plot_layout(guides = 'collect')    # Share legend across plots
figure_conf_curves

# Export final figure as PDF for supplementary materials
pdf(file="supp_mat_conf_curves.pdf",
    width = 13, height = 13)
figure_conf_curves
dev.off()
